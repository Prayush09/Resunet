generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  name          String
  image         String?
  role          String?
  roleLink      String?
  linkedin      String?
  twitter       String?
  mobile        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  resumes       Resume[]
  googleScholarUrl String?
  patentsToDisplay Int?    @default(3)
  patents       Patent[]
  
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Resume {
  id            String   @id @default(uuid())
  userId        String
  title         String
  summary       String?
  template      String   @default("classic") // Added template field with default value
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id])
  sections      Section[]
  skills        Skill[]
}

model Section {
  id            String   @id @default(uuid())
  resumeId      String
  type          SectionType
  content       String
  order         Int
  customName    String?

  resume        Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Skill {
  id            String   @id @default(uuid())
  resumeId      String
  name          String
  proficiency   Int // From 0 to 100

  resume        Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

enum SectionType {
  EDUCATION
  EXPERIENCE
  SKILLS
  PROJECTS
  CERTIFICATIONS
  CUSTOM
}

model Patent {
  id            String   @id @default(uuid())
  userId        String
  title         String
  authors       String
  publicationDate String?
  patentNumber  String?
  abstract      String?
  url           String?
  citations     Int?
  lastUpdated   DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
